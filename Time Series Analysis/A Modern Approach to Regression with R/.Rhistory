realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process <- realization
for(i in 1:10){
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process = rbind(process, realization)
}
plot(seq(1000),process[1,],col="green",type="l",ylim = c(min(process),max(process)))
lines(seq(1000),process[2,],col="blue",type="l")
lines(seq(1000),process[3,],col="red",type="l")
lines(seq(1000),process[4,],col="yellow",type="l")
lines(seq(1000),process[5,],col="purple",type="l")
lines(seq(1000),process[6,],col="blue",type="l")
lines(seq(1000),process[7,],col="green",type="l")
lines(seq(1000),process[8,],col="red",type="l")
lines(seq(1000),process[9,],type="l")
lines(seq(1000),process[10,],col="yellow",type="l")
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process <- realization
for(i in 1:10){
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process = rbind(process, realization)
}
plot(seq(1000),process[1,],col="green",type="l",ylim = c(min(process),max(process)))
lines(seq(1000),process[2,],col="blue",type="l")
lines(seq(1000),process[3,],col="red",type="l")
lines(seq(1000),process[4,],col="yellow",type="l")
lines(seq(1000),process[5,],col="purple",type="l")
lines(seq(1000),process[6,],col="blue",type="l")
lines(seq(1000),process[7,],col="green",type="l")
lines(seq(1000),process[8,],col="red",type="l")
lines(seq(1000),process[9,],type="l")
lines(seq(1000),process[10,],col="yellow",type="l")
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process <- realization
for(i in 1:10){
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process = rbind(process, realization)
}
plot(seq(1000),process[1,],col="green",type="l",ylim = c(min(process),max(process)))
lines(seq(1000),process[2,],col="blue",type="l")
lines(seq(1000),process[3,],col="red",type="l")
lines(seq(1000),process[4,],col="yellow",type="l")
lines(seq(1000),process[5,],col="purple",type="l")
lines(seq(1000),process[6,],col="blue",type="l")
lines(seq(1000),process[7,],col="green",type="l")
lines(seq(1000),process[8,],col="red",type="l")
lines(seq(1000),process[9,],type="l")
lines(seq(1000),process[10,],col="yellow",type="l")
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process <- realization
for(i in 1:10){
noise = rnorm(999)
Y = 27/6
realization = matrix(Y,1,1)
for(i in 1:length(noise)){
Y = Y + noise[i]
realization = cbind(realization, Y)
}
process = rbind(process, realization)
}
plot(seq(1000),process[1,],col="green",type="l",ylim = c(min(process),max(process)))
lines(seq(1000),process[2,],col="blue",type="l")
lines(seq(1000),process[3,],col="red",type="l")
lines(seq(1000),process[4,],col="yellow",type="l")
lines(seq(1000),process[5,],col="purple",type="l")
lines(seq(1000),process[6,],col="blue",type="l")
lines(seq(1000),process[7,],col="green",type="l")
lines(seq(1000),process[8,],col="red",type="l")
lines(seq(1000),process[9,],type="l")
lines(seq(1000),process[10,],col="yellow",type="l")
time=seq(1000)
value = process[1,]
plot(time,value,col="green",type="l",ylim = c(min(process),max(process)))
lines(seq(1000),process[2,],col="blue",type="l")
lines(seq(1000),process[3,],col="red",type="l")
lines(seq(1000),process[4,],col="yellow",type="l")
lines(seq(1000),process[5,],col="purple",type="l")
lines(seq(1000),process[6,],col="blue",type="l")
lines(seq(1000),process[7,],col="green",type="l")
lines(seq(1000),process[8,],col="red",type="l")
lines(seq(1000),process[9,],type="l")
lines(seq(1000),process[10,],col="yellow",type="l")
```
diff(1:10, 2)
diff(1:10, 2, 2)
diff(1:10, 2, 3)
diff(1:10, 2, 6)
diff(2,3)
diff(x, lag = 2)
diff(l, lag = 2)
l
uno = 1:10
dos = matrix(2,1,10)
dos
diff(uno,dos)
diff(dos,uno)
diff(uno, lag =1)
diff(uno, lag =2)
diff(uno, lag =3)
diff(dos,lag=1)
diff(dos,lag=2)
mydata = read.csv("A3_jagt_NOx.csv")
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
View(mydata)
mydata(1)
mydata[1]
mydata[3]
NOx = mydata[3]
plot(NOx)
k = seq(length(NOx))
NOx = mydata[3]
t = seq(length(NOx))
plot(NOx,t)
plot(t,NOx)
time = mydata[2]
View(time)
plot(time,NOx)
setwd("/home/arturo/Documents/Time Series Analysis/A Modern Approach to Regression with R")
#March 17, 2009
confood2 <- read.table("confood2.txt", header=TRUE)
attach(confood2)
#Figure 9.1 on page 306
par(mfrow=c(1,1))
plot(log(Price),log(Sales),xlab=expression(log(Price[t])),ylab=expression(log(Sales[t])),
pch=Promotion+2,col=Promotion+1)
legend(-0.3, 8.5,legend=c("No","Yes"),pch=2:3,col=1:2,title="Promotion")
#Figure 9.2 on page 307
plot(Week,log(Sales),type='o',ylab=expression(log(Sales[t])),xlab="Week, t",
pch=Promotion+2,col=Promotion+1)
legend(0, 8.5,legend=c("No","Yes"),pch=2:3,col=1:2,title="Promotion")
#Figure 9.3 on page 307
plot(log(SalesLag1),log(Sales),ylab=expression(log(Sales[t])),
xlab=expression(log(Sales[t-1])))
#Figure 9.4 on page 308
acf(log(Sales))
#Figure 9.5 on page 309
lsm1 <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
StanRes1 <- rstandard(lsm1)
par(mfrow=c(2,2))
plot(log(Price),StanRes1,ylab="Standardized Residuals",xlab=expression(log(Price[t])))
plot(Week,StanRes1,ylab="Standardized Residuals",xlab="Week, t",type='o')
plot(Promotion,StanRes1,ylab="Standardized Residuals")
lsm1 <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
StanRes1 <- rstandard(lsm1)
par(mfrow=c(2,2))
plot(log(Price),StanRes1,ylab="Standardized Residuals",xlab=expression(log(Price[t])))
plot(Week,StanRes1,ylab="Standardized Residuals",xlab="Week, t",type='o')
plot(Promotion,StanRes1,ylab="Standardized Residuals")
plot(lsm1$fitted.values,StanRes1,ylab="Standardized Residuals",xlab="Fitted Values")
#Figure 9.6 on page 310
plot(Week,log(Sales),type='o',ylab=expression(log(Sales[t])),xlab="Week, t",
pch=Promotion+2,col=Promotion+1)
legend(0, 8.5,legend=c("No","Yes"),pch=2:3,col=1:2,title="Promotion")
#Figure 9.3 on page 307
plot(log(SalesLag1),log(Sales),ylab=expression(log(Sales[t])),
xlab=expression(log(Sales[t-1])))
#Figure 9.4 on page 308
acf(log(Sales))
#Figure 9.5 on page 309
lsm1 <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
StanRes1 <- rstandard(lsm1)
par(mfrow=c(2,2))
plot(log(Price),StanRes1,ylab="Standardized Residuals",xlab=expression(log(Price[t])))
plot(Week,StanRes1,ylab="Standardized Residuals",xlab="Week, t",type='o')
plot(Promotion,StanRes1,ylab="Standardized Residuals")
plot(lsm1$fitted.values,StanRes1,ylab="Standardized Residuals",xlab="Fitted Values")
#Figure 9.6 on page 310
par(mfrow=c(1,1))
acf(StanRes1,main="Series Standardized Residuals")
#R output on page 313
install.packages("nlme")
library(nlme)
m1 <- gls(log(Sales)~log(Price)+Promotion+Week,correlation=corAR1(form=~Week),data=confood2,method="ML")
summary(m1)
intervals(m1)
#Figure 9.7 on page 314
acf(m1$residuals,main="Series GLS Residuals")
#R output on page 318
g <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
rho <- 0.5504
x <- model.matrix(g)
Sigma <- diag(length(Week))
Sigma <- rho^abs(row(Sigma)-col(Sigma))
sm <- chol(Sigma)
smi <- solve(t(sm))
xstar <- smi %*% x
ystar <- smi %*% log(Sales)
m1tls <- lm(ystar ~ xstar-1)
minus <-xstar-xstars
summary(m1tls)
#Figure 9.8 on page 318
par(mfrow=c(2,2))
plot(xstar[,1],ystar,xlab="Intercept*",ylab="log(Sales)*")
identify(xstar[,1],ystar,Week)
rm(list=ls())
require(ggplot2)
install.packages("ggplot2")
datafilename="http://personality-project.org/r/datasets/electric.data.txt" #where are the data?
#local data are at datafilename <- "/Library/WebServer/Documents/personalitytheoryf/r/datasets/electric.data.txt"
#alternatively, we can dynamically find out the file name
datafilename <- file.choose()    #get the name of the file by using system commands
electric  <- read.table(datafilename,header=TRUE)  #read the data file
electric  <- read.table(datafilename,header=TRUE)  #read the data file
describe(electric)    #get basic descriptive statistics using the describe function
attach(electric)                               #for easier manipulation
dates <-strptime(as.character(electric$date1), "%m/%d/%y")   #change the date field to a internal form for time
#see ?formats and ?POSIXlt  for how to read different formats
#further note that we need to treat the date information as read from the spreadsheet as character data
timets <- ts(time, frequency = 24)
time = as.matrix(mydata[,2])
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
NOx = mydata[3]
time = as.matrix(mydata[,2])
timets <- ts(time, frequency = 24)
plot(time,NOx)
NOx = as.matrix(mydata[3])
NOx = as.matrix(mydata[3])
time = as.matrix(mydata[2])
plot(time,NOx)
plot(timets,NOx)
sim1 <- arima.sim(model = list(ar=0.6, order=c(1,1,0)), n = 500)
plot(sim1)
acf(sim1)
acf(sim1, lag.max = 500) ## Don't calculate the acf to lag.max=N !!
sim1 <- arima.sim(model = list(ar=0.6, order=c(1,1,0)), n = 500)
plot(sim1)
acf(sim1)
acf(sim1, lag.max = 500) ## Don't calculate the acf to lag.max=N !!
# Simulating an AR(1) - same as above just without d=1
sim2 <- arima.sim(model = list(ar=0.6, order=c(1,0,0)), n = 500)
plot(sim2)
acf(sim2)
acf(diff(sim1)) # Comparing with first order differences of the first model.
# Simulating a seasonal AR(1) model with season 12
# AR(1)_{s=12}
# arima.sim doesn't handle seasonal models but we can just specify the polynomial
# in B rather than in B^s:
sim3 <- arima.sim(model=list(ar=c(rep(0,11),0.6)), n=500)
plot(sim3)
arma11 <- arima.sim(model=list(ar=c(0.8), ma=0.6), n=250)
plot(arma11)
acf(arma11)
pacf(arma11)
fit.ar1 <- arima(arma11,order =c(1,0,0) )
acf(fit.ar1$residuals)
pacf(fit.ar1$residuals)
tsdiag(fit.ar1)
fit.arma11 <- arima(arma11,order =c(1,0,1) )
acf(fit.arma11$residuals)
pacf(fit.arma11$residuals)
tsdiag(fit.arma11)
fit.arma11.css <- arima(arma11,order =c(1,0,1) , method="CSS")
fit.arma11.css
fit.arma11
## Simulating some data ...
arms1 <- arima.sim(model=list(ar=c(.4,-.3,.6), ma=0.41), n=250)
plot(arms1)
## ACF and PACF
par(mfrow=c(2,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
acf(arms1)
pacf(arms1)
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
ts(1:10, frequency = 24, start = c(1, 3)) # 2nd Quarter of 1959
ts(1:100, frequency = 24, start = c(1, 3)) # 2nd Quarter of 1959
ts(1:100, frequency = 24, start = c(1, 3)) # 2nd Quarter of 1959
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
ts(1:100, frequency = 24, start = c(1, 1)) # 2nd Quarter of 1959
x <- ts(1:100, frequency = 24, start = c(1, 1)) # 2nd Quarter of 1959
x
x <- ts(1:length(NOx), frequency = 24, start = c(1, 1)) # 2nd Quarter of 1959
x
plot(x,NOx)
plot(x,NOx,,col="green",type="l", lty=2, lwd=1)
help substr,
help substr
substr help
?substr
substr(x,1,3)
x
substr(x,1,2)
x
x[1,24]
x[1,24]
x(1,24)
?ts
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
ts(1:10, frequency = 7, start = c(12, 2))
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
NOx = as.matrix(mydata[3])
x <- ts(1:length(NOx), frequency = 24, start = c(1, 1)) # 2nd Quarter of 1959
x
time <- ts(1:length(NOx), frequency = 24)
x <- ts(1:length(NOx), frequency = 24, start = c(1, 1)) # 2nd Quarter of 1959
time
time <- ts(1:length(NOx), frequency = 24)
plot(time,NOx,,col="green",type="l", lty=2, lwd=1)
plot(x,NOx,,col="green",type="l", lty=2, lwd=1)
?ts
time
time[1]
time[1:24]
plot(time[1:24],NOx,col="green",type="l", lty=2, lwd=1)
plot(time[1:24],NOx[1,24],col="green",type="l", lty=2, lwd=1)
plot(time[1:24],NOx[1:24],col="green",type="l", lty=2, lwd=1)
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
NOx <- as.matrix(mydata[3])
time <- ts(1:length(NOx), frequency = 24)
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
dates <- seq(as.Date("14/03", format = "%d/%m"),by = "days", length = length(mydata$NOx))
dates <- seq(as.Date("14/03", format = "%d/%m"),by = "days", length = length(mydata$NOx)/24)
plot(dates,NOx,col="green",type="l", lty=2, lwd=1)
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
axis(1, at=1:10, labels=dates[1:10])
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
axis(1, at=1:10, labels=dates)
axis(1, at=1:10, labels=dates)
axis(1, at=seq(1, length(mydata$NOx), by = 24), labels=dates)
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
axis(1, at=seq(1, length(mydata$NOx), by = 24), labels=dates)
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
axis(1, at=seq(1, length(mydata$NOx), by = 24), labels=dates)
plot(time,NOx,col="green",type="l", lty=2, lwd=1, xlab=None)
plot(time,NOx,col="green",type="l", lty=2, lwd=1, xlab=FALSE)
axis(1, at=seq(1, length(mydata$NOx), by = 24), labels=dates)
plot(time,NOx,col="green",type="l", lty=2, lwd=1)
axis(1, at=seq(1, length(mydata$NOx), by = 24), labels=dates)
require(ggplot2)
d<-seq(1,50)
d
d <- matrix(d, nrow = 10, byrow = TRUE)
d
d<-seq(1,50)
d <- matrix(d, ncol = 10, bycol = TRUE)
d <- matrix(d, ncol = 10, byrow = TRUE)
d
time
d <- matrix(time, ncol = 24, byrow = TRUE)
d
d <- matrix(time, ncol = 24, byrow = TRUE)
d
d <- matrix(NOx, ncol = 24, byrow = TRUE)
d
d[,1]
d[1,]
d[1]
d[1,]
t = seq(1,24)
t
plot(t,d[1,])
plot(t,d[2,])
plot(t,d[5,])
plot(t,d[9,])
plot(t,d[12,])
plot(t,d[10,])
plot(t,d[20,])
plot(t,d[21,])
d
t
t = seq(24:1)
t
t = seq(1:24)
t
t = seq(24:1)
t
?seq
seq(from=24, to=1)
t = seq(from=24, to=1)
d
d = sqe(1:21)
d = seq(1:21)
d
d <- matrix(d, ncol = 3, byrow = TRUE)
d
plot(NOxday[1,],tday)
plot(tday, NOxday[1,])
NOxday <- matrix(NOx, nrow = 24, byrow = TRUE) #reshape into day rows
plot(tday, NOxday[1,])
tday <- seq(from=24, to=1)
NOxday <- matrix(NOx, ncol = 24, byrow = TRUE) #reshape into day rows
plot(tday, NOxday[1,])
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOxday)
dates <- seq(as.Date("14/03", format = "%d/%m"),by = "days", length = length(mydata$NOx)/24)
time <- ts(1:length(NOx), frequency = 24)
plot(t,d[21,])
time
plot(time,NOx)
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOxday)
plot(time, NOx)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
acf(NOx)
acf(NOx, lag.max=1000)
pacf(NOx, lag.max = 1000)
pacf(NOx, lag.max = 30)
acf(NOx, lag.max=1000)
pacf(NOx, lag.max = 30)
acf(NOx, lag.max=1000)
acf(NOx, lag.max=30)
1000
acf(NOx, lag.max=1000)
NOx <- as.matrix(mydata[3])
tday <- seq(from=24, to=1)
NOxday <- matrix(NOx, ncol = 24, byrow = TRUE) #reshape into day rows
plot(tday, NOxday[1,])
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
acf(NOx, lag.max=1000)
pacf(NOx, lag.max = 30)
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
NOx <- as.matrix(mydata[3])
tday <- seq(from=24, to=1)
NOxday <- matrix(NOx, ncol = 24, byrow = TRUE) #reshape into day rows
plot(tday, NOxday[1,])
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
acf(NOx, lag.max=1000)
acf(NOx, lag.max=1000)
acf(NOx, lag.max = 30)
pacf(NOx, lag.max=1000)
pacf(NOx, lag.max = 30)
acf(NOx, lag.max=1000)
acf(NOx, lag.max = 50)
pacf(NOx, lag.max=1000)
pacf(NOx, lag.max = 50)
mydata = read.csv("/home/arturo/Documents/Time Series Analysis/Assignment3/A3_jagt_NOx.csv")
NOx <- as.matrix(mydata[3])
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
acf(NOx, lag.max=1000)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
Nox
NOx
mean(NOx[1:300])
mean(NOx[301:650])
mean(NOx)
var(NOx)
var(NOx[1:300])
var(NOx[300:600])
var(NOx[500:600])
var(NOx[300:400])
var(NOx[200:300])
acf(NOx, lag.max=1000)
acf(NOx, lag.max = 50)
pacf(NOx, lag.max=1000)
pacf(NOx, lag.max = 50)
acf(NOx, lag.max = 50)
adf.test(diff(log(NOx)), alternative="stationary", k=0)
?adf
install tseries
install.packages(tseries)
install.packages("quadprog")
adf.test(diff(log(NOx)), alternative="stationary", k=0)
install.packages("tseries")
install.packages("tseries")
adf.test(diff(log(NOx)), alternative="stationary", k=0)
time <- ts(1:length(NOx), frequency = 24)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
plot(time, log(NOx),col="green",type="l", lty=2, lwd=1)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
plot(time, log(NOx),col="green",type="l", lty=2, lwd=1)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
plot(time, log(NOx),col="green",type="l", lty=2, lwd=1)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
plot(time, log(NOx),col="green",type="l", lty=2, lwd=1)
plot(time, diff(NOx),col="green",type="l", lty=2, lwd=1)
plot(time, NOx,col="green",type="l", lty=2, lwd=1)
plot(time, diff(NOx),col="green",type="l", lty=2, lwd=1)
acf(log(NOx))
